<!DOCTYPE html>
<html>

<head>
	<title>
		<%=typeof title == 'undefined' ? 'WebGram' : title%>
	</title>

	<!-- Viewport mobile tag for sensible mobile support -->
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
	<meta name="theme-color" content="#5C5353">


	<!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

	<!--STYLES-->
	<link rel="stylesheet" href="/styles/comments.css">
	<link rel="stylesheet" href="/styles/dependencies/bootstrap.min.css">
	<link rel="stylesheet" href="/styles/dependencies/font-awesome.min.css">
	<link rel="stylesheet" href="/styles/dependencies/toastr.min.css">
	<link rel="stylesheet" href="/styles/groups.css">
	<link rel="stylesheet" href="/styles/importer.css">
	<link rel="stylesheet" href="/styles/loginModal.css">
	<link rel="stylesheet" href="/styles/logo-nav.css">
	<link rel="stylesheet" href="/styles/navbar.css">
	<link rel="stylesheet" href="/styles/signupModal.css">
	<link rel="stylesheet" href="/styles/styles.css">
	<link rel="stylesheet" href="/styles/uploadPostModal.css">
	<!--STYLES END-->
</head>

<body onload="loadScroll()" onunload="saveScroll()">

	<!-- Navigation -->
	<nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
		<div class="container">
			<!-- Brand and toggle get grouped for better mobile display -->
			<div class="navbar-header">



				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
					<span class="sr-only">Toggle navigation</span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
				</button>
				<!-- Show login button when user is not logged, otherwise show logout button -->
				<% if (!req.session.authenticated) { %>
					<button id="loginButton" type="submit" class="btn btn-success pull-right btn-sm vcenter hidden-sm hidden-lg hidden-md" data-toggle="modal" data-target="#loginModal">Login</button>
					<% } else { %>
						<button id="logoutButton" class="btn btn-success pull-right btn-sm vcenter hidden-sm hidden-lg hidden-md">Logout</button>
						<% } %>
							<a class="navbar-brand" href="/">
								<img src="images/WebGram logo.png" alt="The WebGram Logo">
							</a>
			</div>
			<!-- Collect the nav links, forms, and other content for toggling -->
			<div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
				<ul class="nav navbar-nav">
					<li>
						<a data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" id="topButton">Top</a>
					</li>
					<li>
						<a data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" id="trendingButton">Trending</a>
					</li>
					<!-- Show your favorites tab if logged in -->
					<% if (req.session.authenticated) { %>
						<li>
							<a data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" id="favoritesButton">Your favorites</a>
						</li>
						<li>
							<a data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" id="myUploadsButton">Your uploads</a>
						</li>
						<!-- Allow to post a new picture when logged in -->
						<li>
							<span data-toggle="collapse" data-target="#bs-example-navbar-collapse-1"></span>
							<a id="createPostButton" data-toggle="modal" data-target="#postModal" href="">Post new picture</a>
						</li>
						<% } %>
				</ul>

				<!-- Show login button when user is not logged, otherwise show logout button -->
				<% if (!req.session.authenticated) { %>
					<button id="loginButton" type="submit" class="btn btn-success pull-right btn-lg hidden-xs" data-toggle="modal" data-target="#loginModal">Login</button>
					<% } else { %>

						<button id="logoutButton" class="btn btn-success pull-right btn-lg hidden-xs">Logout</button>
						<% } %>
			</div>
			<!-- /.navbar-collapse -->
		</div>
		<!-- /.container -->
	</nav>

	<%- body %>



		<!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

		<!--TEMPLATES-->

		<!--TEMPLATES END-->


		<!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

		<!--SCRIPTS-->
		<script src="/js/dependencies/sails.io.js"></script>
		<script src="/js/dependencies/jquery.min.js"></script>
		<script src="/js/dependencies/bootstrap.min.js"></script>
		<script src="/js/dependencies/jquery.validate.min.js"></script>
		<script src="/js/dependencies/jquery.viewport.js"></script>
		<script src="/js/dependencies/js.cookie.js"></script>
		<script src="/js/dependencies/toastr.min.js"></script>
		<script src="/js/authenticationService.js"></script>
		<script src="/js/favoriteImage.js"></script>
		<script src="/js/imageLoader.js"></script>
		<script src="/js/loginForm.js"></script>
		<script src="/js/logoutButton.js"></script>
		<script src="/js/postComment.js"></script>
		<script src="/js/scrollService.js"></script>
		<script src="/js/signupForm.js"></script>
		<script src="/js/uploadPost.js"></script>
		<!--SCRIPTS END-->
</body>

</html>